@name Turret Controller [4.2.0]

@inputs [Base]:entity
@inputs [MAIN_Gun1 AUX_Gun1 AUX_Gun2 MAIN_Turret1 Designator]:entity # MAIN TURRET 1

@inputs Build 
@inputs CONSOLE_EVENT:string

@outputs BallisticOffset:vector
@outputs US 
@outputs DNUM:number DVEC:vector DSTRING:string DTABLE:table DARRAY:array DENTITY:entity DANGLE:angle

@persist [Driver]:entity

@trigger Build
#[   
    CREATED & MAINTAINED BY: Tris#7689 on Discord
    REFACTORED FROM: An E2 made by worldpeace/UberDude
    
    Feel free to contact for issues, suggestions or possible optimizations, any potential improvements are very welcome.
]#

if(first() | (first() & dupefinished()) | duped()) {

    INIT_START = systime()

    #include "Expression2_TurretFramework/turretlib"
    #include "Expression2_TurretFramework/doc"

    function table createGlobalVars(Base:entity) {

        local TableOut = table()
        
        #YOU CAN EDIT THESE
        TableOut["DEBUG", number]           = 0     #Set this to 1 when editing to see things like cam positions and axis points
        TableOut["TickInterval", number]    = 4     #By default, the e2 runs every 4 ticks, this seems to be a good compromise between cost and animation quality
        TableOut["MinFOV", number]          = 3     #Minimum FOV, a smaller number will give stronger magnification
        TableOut["MaxFOV", number]          = 90    #Maximum FOV, set this to the default FOV you use in your game settings
        TableOut["ZoomLevels", number]      = 8     #Amount of Zoom levels you can switch between, when set to 1, you will always be fully zoomed out

        TableOut:initGlobalVars()
        return TableOut
        
    }
    
    function table setPlayerKeybinds() {
        
        local TableOut = table()
        
        TableOut["AmmoSwitch", string]          = "1"
        TableOut["WeaponGroupSwitch", string]   = "2"
        TableOut["BallisticSwitch", string]     = "3"
        TableOut["TurretGroupSwitch", string]   = "5"
        TableOut["GunLock", string]             = "c"
        TableOut["CamSwitch", string]           = "v"
        TableOut["LASE", string]                = "x"
        TableOut["FireCoax", string]            = "mouse_right"
        TableOut["FireMain", string]            = "mouse_left"
        TableOut["ZoomIn", string]              = "mouse_wheel_up"
        TableOut["ZoomOut", string]             = "mouse_wheel_down"
        #TableOut["ZoomSwitch", string] = ""

        return TableOut
    }
    
    #CALL INIT FUNCTIONS AND INIT STUFF
    
    #MULTIPLE TURRET SETUP EXAMPLE BELOW
    #turretInit(GunEntity, TurretEntity, TurretBase, TurretAxisOffset, GunAxisOffset, AngMax, AngMin, Rate, Smoothing)
    
    GlobalVariables = createGlobalVars(Base)

    initTurret(                                 #Calling turretInit(), new turrets need to be added to the Turrets[] 
                                                #table with the appropriate index, using the same index overwrites an existing turret
                        MAIN_Gun1,              #Gun Entity, this is the main gun of your turret.
                        MAIN_Turret1,           #Turret Entity, this is your turret base.
                        Base,                   #Turret Base, the turret ring is parented to this, you can setup
                                                #turrets on turrets by setting this to the "TParent" of the master turret
                                                #Like this: Turrets[X, table]["TParent", entity], Replace X with the appropriate turret index
                        vec(0,0,0),             #Offset of the turret axis, leave as 0 for central axis.
                        vec(0, 24.5, 0),        #Offset of the gun axis, Offset is relative to guns mass center.
                        ang(12, 180, 0),        #Angle limit defined as ang(Depression, MaxRight, 0).
                        ang(-30, -180, 0),      #Angle limit defined as ang(-Elevation, -MaxLeft, 0) KEEP NEGATIVES IN PLACE UNLESS ISSUES ARISE.
                        30,                     #Traverse rate of turret in degrees/s.
                        5,                      #Smoothing
                        ang(0,0,90))            #Turret axis angle offset, use this to fix mis-angled turrets
    
    initTurretGroup(1, "MAIN TURRET", array(MAIN_Turret1))
    #The above function does this.
    #turretGroupInit(This is the First group, Name in HUD is "MAIN TURRET", array of all Turret bases in group)
    addCamPos(1, Base, vec(0,0,100), 200, 0) 
    #The above function does this.
    #addCamPos(Add to First Turret Group, Attach Cam to Base, Offset Centre Point by xyz, Place Cam 200 units away from Centre, Dont Use Vignette)
    addCamPos(1, MAIN_Turret1, vec(24, 36, 30), 0, 1)
    #The above function does this.
    #addCamPos(Add to First Turret Group, Attach Cam to MAIN_Turret1, Offset Centre Point by xyz, Place Cam 0 units away from Centre, Use Vignette)
    setDesignator(1, Designator)
    
    addWeaponGroup(1, "MAIN", array(MAIN_Gun1), array(AUX_Gun1))
    #The above function does this.
    #addWeaponGroup(Add to First turret group, Name in HUD is "MAIN", Array of all Primary Weapons, Array of all Secondary Weapons)
    addAmmoGroup(1, 1, "[1 / 2]", array("57mmSAAPHE"))
    addAmmoGroup(1, 1, "[2 / 2]", array("57mmSAAPDS"))
    #The above function does this.
    #addWeaponGroup(Add to First turret group, Add to First weapon group, Name in HUD is "[2 / 2]", Array of all Ammo Types included)
    #The names of ammo types can be found by calling acfNameShort() on an acf ammo crate.
    
    addWeaponGroup(1, "LAUNCHER", array(AUX_Gun2), array())
    addAmmoGroup(1, 2, "[MSL_HEAT]", array("BGM-71E ASMHEAT"))
    
    #Dont touch the stuff below
    Keybinds = setPlayerKeybinds()
    Cam["FilterEntities", array] = Base:getConnectedEntities()
    BallisticOffset = vec(0, 0, 0)
    Cam:setCamVars(GlobalVariables)
    print("INIT took: " + toString(systime() - INIT_START):sub(1, 6) + " seconds")
    #END OF IF(FIRST | DUPEFINISHED)
    
}

if(Build & !GlobalVariables["Built", number]) {
    
    GlobalVariables["Built", number] = 1
    buildTurrets()
}

# START OF "MAIN()"-------------------------------------------------------------

interval(500)

if(changed(Pod["Active", number])) {
    
    runOnKeys(Driver, 0)
    
    if(Pod["Active", number]){
        
    Driver = Pod["Driver", entity]
    runOnKeys(Driver, 1)
    EGP:initEGP(1)
    Cam["Activated", number] = 1
    setActiveAmmoGroup(GlobalVariables["ActiveTurretGroup", number], GlobalVariables["ActiveWepGroup", number], 1)
    reloadAllEmptyLaunchers()
    
    } else {
    
    runOnKeys(Driver, 0)
    #Driver = noentity()
    Cam["Activated", number] = 0
    
    }
}

if(keyClk(Driver)) {
    
    DSTRING = keyClkPressed()
    GlobalVariables:keyClk_parsePlayerKeys(Driver, AmmoTable, Keybinds)
    
}

if(Pod["Active", number] & !keyClk(Driver)) {
    
    interval(GlobalVariables["TickInterval", number])
    
    US = cpuUsage() * 1000000
    EGP:egpClkUpdate(Base)
    #EGP:egpUpdateRadarScanlines()
    EGP:egpUpdateConsole(CONSOLE_EVENT)
    
    GlobalVariables["TurretGroups", table][GlobalVariables["ActiveTurretGroup", number], table]:setPY_DesignatorAngles(Cam["HitPos",vector])
    GlobalVariables["DistToTarget", number] = GlobalVariables["TurretGroups", table][GlobalVariables["ActiveTurretGroup", number], table]["Turrets", array][1, entity]["GParent", entity]:pos():distance(Cam["HitPos",vector]) #GParent:pos():distance(Cam_HitPos)

    for(I = 1, GlobalVariables["TurretGroups", table][GlobalVariables["ActiveTurretGroup", number], table]["Turrets", array]:count()) {
        GlobalVariables["TurretGroups", table][GlobalVariables["ActiveTurretGroup", number], table]["Turrets", array][I, entity]:moveTurret(
            Cam["HitPos",vector], 
            solveBallistics(
                        GlobalVariables["TurretGroups", table][GlobalVariables["ActiveTurretGroup", number], table]["Turrets", array][I, entity]["GChild", entity], 
                        GlobalVariables["DistToTarget", number], 
                        1, 
                        GlobalVariables["BallisticsToggle", number] ), 
            GlobalVariables["GunLock", number] )
    }

    #DNUM = GlobalVariables["TurretGroups", table][GlobalVariables["ActiveTurretGroup", number], table]["Turrets", array][1, entity]["GChild", entity]:solveDragCoeff(3),
    #DTABLE = GlobalVariables["TurretGroups", table][1, table]["WeaponGroups", table][1, table]["AmmoGroups", table][1, table]
    #DTABLE = HUDelements["RadarSigs", table]
    #DARRAY = GlobalVariables["ConsoleLog", array]
    #DVEC = GlobalVariables["AllTurrets", array][1, entity]["AimposHolo", entity]:pos()
    #DNUM = HUDelements["RadarScanlines", table]["Accumulator", number]
}
